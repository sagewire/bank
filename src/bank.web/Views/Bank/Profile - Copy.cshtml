@using bank.reports
@using bank.enums
@model BankProfileViewModel

@{
    Layout = "~/Views/Shared/_LayoutSingle.cshtml";
}


@section Header {

    @Html.Partial("_Header", Model.Header)

}



<div class="card">
    <div class="card-block">
        <div class="test"></div>
    </div>
</div>

<div class="card">
    <div class="card-block">
        <h1>@Model.Organization.Name</h1>

        <table class="table table-hover">
            <thead>
                <tr>
                    <th width="70%">Period</th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var report in Model.Reports)
                {
                    <tr>
                        <td>
                            @report.Period.ToString("yyyy-MM-dd")
                        </td>
                        <td align="center">
                            @if (report.ReportsAvailable.Contains(ReportTypes.Call))
                            {
                                <a href="@Url.Url(Model.Organization, report.Period, @ReportTypes.Call)">
                                    @ReportTypes.Call
                                </a>
                            }
                        </td>
                        <td align="center">
                            @if (report.ReportsAvailable.Contains(ReportTypes.UBPR))
                            {
                                <a href="@Url.Url(Model.Organization, report.Period, @ReportTypes.UBPR)">
                                    @ReportTypes.UBPR
                                </a>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
</div>


@section ScriptsProxy {
    <script src="https://code.highcharts.com/highcharts.js"></script>

    <script>
        $(function () {

            Highcharts.LineChart = function (a, b, c) {

                var hasRenderToArg = typeof a === 'string' || a.nodeName,
                options = arguments[hasRenderToArg ? 1 : 0],
                defaultOptions = {
                    chart: {
                        renderTo: (options.chart && options.chart.renderTo) || this,
                        backgroundColor: null,
                        borderWidth: 0,
                        type: 'areaspline',
                        margin: [0, 0, 0, 0],

                        style: {
                            overflow: 'visible'
                        },
                        skipClone: true
                    },
                    title: {
                        text: ''
                    },
                    credits: {
                        enabled: false
                    },
                    xAxis: {
                        type: "datetime",
                        labels: {
                            enabled: false
                        },
                        title: {
                            text: null
                        },
                        startOnTick: false,
                        endOnTick: false,
                        tickPositions: []
                    },
                    yAxis: {
                        endOnTick: false,
                        startOnTick: false,
                        labels: {
                            enabled: false
                        },
                        title: {
                            text: null
                        },
                        tickPositions: [0]
                    },
                    legend: {
                        enabled: false
                    },
                    tooltip: {
                        enabled: false
                    },
                    plotOptions: {
                        series: {
                            enabledMouseTracking: false,
                            animation: {
                                duration: 750
                            },
                            lineWidth: 1,
                            shadow: false,
                            states: {
                                hover: {
                                    lineWidth: 1
                                }
                            },
                            marker: {
                                radius: 1,
                                states: {
                                    hover: {
                                        radius: 2
                                    }
                                }
                            },
                            fillOpacity: 0.25
                        },
                        column: {
                            negativeColor: '#910000',
                            borderColor: 'silver'
                        }
                    }
                };
                options = Highcharts.merge(defaultOptions, options);

                return hasRenderToArg ?
                    new Highcharts.Chart(a, options, c) :
                    new Highcharts.Chart(options, b);
            };

            $(".test").highcharts('LineChart', {
                series: [{
                    data: @Model.ToSeries(Model.TotalAssets).ToJson().ToMvcHtmlString()
                    },
                {
                    data: @Model.ToSeries(Model.TotalDeposits).ToJson().ToMvcHtmlString()
                    },
                {
                    data: @Model.ToSeries(Model.TotalLiabilities).ToJson().ToMvcHtmlString()
                    }
                ]
            });

        });
    </script>
}