<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <!-- The configuration and platform will be used to determine which
         assemblies to include from solution and project documentation
         sources -->
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{9719dc7a-8a1f-4f02-a57e-0655fdb1ead6}</ProjectGuid>
    <SHFBSchemaVersion>1.9.9.0</SHFBSchemaVersion>
    <!-- AssemblyName, Name, and RootNamespace are not used by SHFB but Visual
         Studio adds them anyway -->
    <AssemblyName>Documentation</AssemblyName>
    <RootNamespace>Documentation</RootNamespace>
    <Name>Documentation</Name>
    <!-- SHFB properties -->
    <OutputPath>.\Help\</OutputPath>
    <HtmlHelpName>JeffFerguson.Gepsio</HtmlHelpName>
    <Language>en-US</Language>
    <HelpFileFormat>HtmlHelp1</HelpFileFormat>
    <CopyrightText>Copyright %28c%29 2008-2015 Jeff Ferguson</CopyrightText>
    <FeedbackEMailAddress>gepsio%40outlook.com</FeedbackEMailAddress>
    <HelpTitle>Gepsio</HelpTitle>
    <DocumentationSources>
      <DocumentationSource sourceFile="JeffFerguson.Gepsio\bin\Debug\JeffFerguson.Gepsio.dll" />
      <DocumentationSource sourceFile="JeffFerguson.Gepsio\bin\Debug\JeffFerguson.Gepsio.xml" />
    </DocumentationSources>
    <FrameworkVersion>.NET Framework 3.5</FrameworkVersion>
    <NamingMethod>MemberName</NamingMethod>
    <CopyrightHref>http://gepsio.codeplex.com</CopyrightHref>
    <FeedbackEMailLinkText>Gepsio</FeedbackEMailLinkText>
    <ProjectSummary>Gepsio is a .NET-based document object model for XBRL documents. Load your XBRL document with the XbrlDocument class and work with your XBRL document exposed as a set of .NET classes with a variety of properties and methods. Loaded XBRL documents are automatically validated against the information against the XBRL specification, and exceptions are thrown when invalid XBRL documents are loaded. The Gepsio code base is unit tested using the XBRL-CONF-CR5-2012-01-24 unit tests designed by the XBRL organization. </ProjectSummary>
    <NamespaceSummaries>
      <NamespaceSummaryItem name="JeffFerguson.Gepsio" isDocumented="True">Gepsio is a .NET-based document object model for XBRL documents. Load your XBRL document with the XbrlDocument class and work with your XBRL document exposed as a set of .NET classes with a variety of properties and methods. Loaded XBRL documents are automatically validated against the information against the XBRL specification, and exceptions are thrown when invalid XBRL documents are loaded. The Gepsio code base is unit tested using the XBRL-CONF-CR5-2012-01-24 unit tests designed by the XBRL organization.</NamespaceSummaryItem>
<NamespaceSummaryItem name="JeffFerguson.Gepsio.Xlink" isDocumented="True">Provides support for the XLINK specification to the Gepsio codebase. The classes in this namespace are typically used for internal use only and are not desgined to be directly usable by Gepsio clients.</NamespaceSummaryItem>
<NamespaceSummaryItem name="JeffFerguson.Gepsio.Xsd" isDocumented="True">Provides support for the XML Schema specification to the Gepsio codebase. The classes in this namespace are typically used for internal use only and are not desgined to be directly usable by Gepsio clients.</NamespaceSummaryItem>
<NamespaceSummaryItem name="JeffFerguson.Gepsio.Xml.Interfaces" isDocumented="True">On 18 July 2014, a changeset was checked in which changed Gepsio’s relationship to the .NET 3.5 XML DOM classes. This change was first published in a build in the Nov 2014 CTP and continued on in the May 2015 CTP. This change removed Gepsio’s direct dependency on the .NET 3.5 XML DOM classes and, instead, moved the support behind a set of internally-defined interfaces. The change introduced interfaces to handle all of the XML work, as well as classes that implemented the interface using the .NET 3.5 XML DOM classes. So, with this design, instead of Gepsio calling something like XmlDocument.Load() to load an XBRL document instance, it called an interface method called IDocument.Load(). The IDocument.Load() interface implementation called XmlDocument.Load() in its implementation.

The rationale behind moving Gepsio’s XML layer behind an interface was to make it easier to support other XML implementations in the future. The future of Gepsio, and its possible reach beyond purely .NET and possibly into other areas, whether it be as a Portable Class Library, as a library that would support Xamarin, or as a library that would support the Universal Windows Platform, means that Gepsio may need to be modified at its lowest level XML layer. For example, The Portable Class Library does not support the .NET 3.5 XML DOM classes. Instead, it supports only the LINQ-to-XML classes. Once XML is loaded, Gepsio is pretty portable, but the XML layer could potentially be a porting problem down the road should the XML runtime need to change.

Moving all of Gepsio’s low level XML needs behind an interface, and implementing the interface in a set of classes that Gepsio would actually be using, makes it easier to change the XML layer later on, should the need arise, without disturbing the rest of the Gepsio code base. Moving, for example, from the .NET 3.5 XML DOM classes to LINQ-to-XML would be a (theoretically) simple matter of implementing the internal XML interfaces in classes that used LINQ-to-XML. Gepsio’s higher levels of code – the XBRL semantics – would not need to change.</NamespaceSummaryItem></NamespaceSummaries>
    <VendorName>Jeff Ferguson</VendorName>
    <WebsiteSdkLinkType>None</WebsiteSdkLinkType>
    <PresentationStyle>VS2013</PresentationStyle>
    <KeepLogFile>False</KeepLogFile>
    <SyntaxFilters>C#, Visual Basic, Visual Basic Usage, Managed C++, F#, XAML Usage, ASP.NET</SyntaxFilters>
    <SdkLinkTarget>Blank</SdkLinkTarget>
    <RootNamespaceContainer>False</RootNamespaceContainer>
    <Preliminary>False</Preliminary>
    <ContentPlacement>AboveNamespaces</ContentPlacement>
    <HelpFileVersion>2.1.0.7</HelpFileVersion>
    <IncludeStopWordList>False</IncludeStopWordList>
    <MaximumGroupParts>2</MaximumGroupParts>
    <NamespaceGrouping>False</NamespaceGrouping>
    <BuildAssemblerVerbosity>OnlyWarningsAndErrors</BuildAssemblerVerbosity>
    <IndentHtml>False</IndentHtml>
    <DisableCodeBlockComponent>False</DisableCodeBlockComponent>
    <CppCommentsFixup>False</CppCommentsFixup>
    <CleanIntermediates>True</CleanIntermediates>
  </PropertyGroup>
  <!-- There are no properties for these groups.  AnyCPU needs to appear in
       order for Visual Studio to perform the build.  The others are optional
       common platform types that may appear. -->
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|Win32' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|Win32' ">
  </PropertyGroup>
  <!-- Import the SHFB build targets -->
  <Import Project="$(SHFBROOT)\SandcastleHelpFileBuilder.targets" />
</Project>